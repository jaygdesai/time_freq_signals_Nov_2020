# -*- coding: utf-8 -*-
"""Signals Management.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yx3497dP3gqxnPMc0LB2yApQaCb3z-JN
"""

import matplotlib.pyplot as plt
import numpy as np
from scipy import fft
import copy
import sqlite3
from datetime import datetime

time        = np.arange(0, 10, 0.1);
amplitude   = np.sin(time)

plt.plot(time, amplitude)

SAMPLE_RATE = 10000 # Hertz
DURATION = 1  # Seconds

def generate_sine_wave(freq, sample_rate, duration):
    x = np.linspace(0, duration, sample_rate * duration, endpoint=False)
    frequencies = x * freq
    # 2pi because np.sin takes radians
    y = np.sin((2 * np.pi) * frequencies)
    return x, y

# Generate a 2 hertz sine wave that lasts for 5 seconds
x1, y1 = generate_sine_wave(50, SAMPLE_RATE, DURATION)
x2, y2 = generate_sine_wave(200, SAMPLE_RATE, DURATION)
x = x1
y = y1 + 0.4*y2
plt.plot(x, y)
plt.show()
# print(x, len(x))
# print(y, len(y))

# Number of samples in normalized_tone
N = SAMPLE_RATE * DURATION

print(str(datetime.now()))
yf = fft.fft(y)
xf = fft.fftfreq(N, 1 / SAMPLE_RATE)
print(str(datetime.now()))

# print(xf, len(xf), type(xf))
# print(yf, len(yf), type(yf))

plt.plot(xf[:], np.abs(yf[:]))
plt.show()

print(len(yf), len(xf))
print(xf)

import sqlite3

conn = sqlite3.connect('test.db')
print("Opened database successfully");

conn.execute('''
CREATE TABLE IF NOT EXISTS freq_data(freq float, 
                      amplitude float);''')

conn.commit()

print("Table created successfully");

conn.close()

yf_sorted = np.sort(np.abs(yf))
print(yf_sorted[::-1])
indices = [index for index, value in sorted(enumerate(np.abs(yf)), reverse=True, key=lambda x: x[1])][:10]
print(indices)
print(yf[indices])
print(np.abs(yf[indices]))
print(xf[indices])

conn = sqlite3.connect('test.db')

for i in range(len(yf)):
    if (np.abs(yf[i]) > 1):
        print(i, yf[i], np.abs(yf[i]), xf[i])
        insertQuery = 'INSERT INTO freq_data VALUES(' + str(xf[i]) + ',' + str(np.abs(yf[i])) + ');'
        print(insertQuery)
        conn.execute(insertQuery)
conn.commit()
conn.close()
i = 21
print(i, yf[i], np.abs(yf[i]), xf[i])

conn = sqlite3.connect('test.db')
cursor = conn.execute(''' SELECT *
                          FROM freq_data ;''')
for row in cursor:
    print(row, type(row))
conn.close()

# recreate yf from data retrieved from database
print(yf[795])

print(yf[795])
for i in range(len(yf)):
  if (i in indices):
    print(i)
    yf[i] = yf[i]
  else:
    yf[i] = 0
print(yf[795])
iy = fft.ifft(yf)
iy_copy = copy.deepcopy(iy)
print(type(iy), len(y), len(iy))
for i in range(len(y)):
    if (np.real(iy[i]) < 0):
        iy_copy[i] = -1 * np.abs(iy[i])
    else:
        iy_copy[i] = np.abs(iy[i])
  # print(i, iy[i], np.real(iy_copy[i]), y[i])
    if (abs(np.real(iy_copy[i])- y[i]) > 0.01):
        print("big err")
plt.plot(x, np.real(iy_copy))
plt.show()
plt.plot(x, y)
plt.show()
# print(len(y), len(yf))  # 200, 200

conn = sqlite3.connect('test.db')
conn.execute("INSERT INTO freq_data VALUES('Real Madrid', 'Spain', 2019, 53);")
conn.execute("INSERT INTO team_data VALUES('Barcelona', 'Spain', 2019, 47);")
conn.execute("INSERT INTO team_data VALUES('Arsenal', 'UK', 2019, 52);")
conn.execute("INSERT INTO team_data VALUES('Real Madrid', 'Spain', 2018, 49);")
conn.execute("INSERT INTO team_data VALUES('Barcelona', 'Spain', 2018, 45);")
conn.execute("INSERT INTO team_data VALUES('Arsenal', 'UK', 2018, 50 );")

conn.commit()

# Average goal by team

conn = sqlite3.connect('test.db')

cursor = conn.execute(''' SELECT team,
                            AVG(total_goals) AS avg_goals
                          FROM team_data
                          GROUP BY team;''')

for row in cursor:
  print(row)
conn.close()

